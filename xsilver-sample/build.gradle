plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'maven-publish'
}

android {
    namespace 'com.nexxo.galileosdk'
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32
        multiDexEnabled true
        versionCode 1
        versionName getVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

/**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN**/
/*def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))*/


def getVersionName = { ->
    return "1.0.3" // Replace with version Name
}

def getArtificatId = { ->
    return "xsilver-sample" // Replace with library name ID
}

afterEvaluate {
    /*from(components["release"])*/
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId 'Nexxo-Xsilver'
                artifactId getArtificatId()
                version getVersionName()
                artifact("$buildDir/outputs/aar/${getArtificatId()}-release.aar")


                //generate .pom file with transitive dependencies
                /*pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')
                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return
                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)
                        if (!dep.transitive) {
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }
                    configurations.compile.getDependencies().each { dep -> addDependency(dep, "implementation") }
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "implementation") }
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }*/
            }
        }

        /*repositories {
            maven {
                name = "GithubPackages"
                *//*Configure path of your package repository on Github
                 Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub*//*

                url = uri("https://maven.pkg.github.com/Nexxo-xsilver/xsilver-sample")

                credentials {
                    *//*Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN*//*
                    username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                    password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
                }
            }
        }*/
    }
}


task wrapper(type: Wrapper){
    gradleVersion = '7.3.1'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    //Retrofit and GSON
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.4"

}